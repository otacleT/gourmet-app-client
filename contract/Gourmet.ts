/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GourmetInterface extends utils.Interface {
  functions: {
    "addMap(string,string,string,int256,int256,uint256)": FunctionFragment;
    "eval(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "addMap" | "eval"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eval",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eval", data: BytesLike): Result;

  events: {
    "NewMap(string,string,string,int256,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMap"): EventFragment;
}

export interface NewMapEventObject {
  name: string;
  category: string;
  address_ja: string;
  latitude: BigNumber;
  longitude: BigNumber;
  star: BigNumber;
}
export type NewMapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  NewMapEventObject
>;

export type NewMapEventFilter = TypedEventFilter<NewMapEvent>;

export interface Gourmet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GourmetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMap(
      _name: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _address_ja: PromiseOrValue<string>,
      _latitude: PromiseOrValue<BigNumberish>,
      _longitude: PromiseOrValue<BigNumberish>,
      _star: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        name: string;
        category: string;
        address_ja: string;
        latitude: BigNumber;
        longitude: BigNumber;
        star: BigNumber;
      }
    >;
  };

  addMap(
    _name: PromiseOrValue<string>,
    _category: PromiseOrValue<string>,
    _address_ja: PromiseOrValue<string>,
    _latitude: PromiseOrValue<BigNumberish>,
    _longitude: PromiseOrValue<BigNumberish>,
    _star: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eval(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      name: string;
      category: string;
      address_ja: string;
      latitude: BigNumber;
      longitude: BigNumber;
      star: BigNumber;
    }
  >;

  callStatic: {
    addMap(
      _name: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _address_ja: PromiseOrValue<string>,
      _latitude: PromiseOrValue<BigNumberish>,
      _longitude: PromiseOrValue<BigNumberish>,
      _star: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    eval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        name: string;
        category: string;
        address_ja: string;
        latitude: BigNumber;
        longitude: BigNumber;
        star: BigNumber;
      }
    >;
  };

  filters: {
    "NewMap(string,string,string,int256,int256,uint256)"(
      name?: null,
      category?: null,
      address_ja?: null,
      latitude?: null,
      longitude?: null,
      star?: null
    ): NewMapEventFilter;
    NewMap(
      name?: null,
      category?: null,
      address_ja?: null,
      latitude?: null,
      longitude?: null,
      star?: null
    ): NewMapEventFilter;
  };

  estimateGas: {
    addMap(
      _name: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _address_ja: PromiseOrValue<string>,
      _latitude: PromiseOrValue<BigNumberish>,
      _longitude: PromiseOrValue<BigNumberish>,
      _star: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMap(
      _name: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _address_ja: PromiseOrValue<string>,
      _latitude: PromiseOrValue<BigNumberish>,
      _longitude: PromiseOrValue<BigNumberish>,
      _star: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
